
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { HfInference } from 'https://esm.sh/@huggingface/inference@2.3.2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Use the provided API keys
const HUGGING_FACE_ACCESS_TOKEN = "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";
const PIXABAY_API_KEY = "49332633-dce2019b5134e9a672d2af561";

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { prompt, profileId } = await req.json();
    
    if (!prompt) {
      throw new Error('Prompt is required');
    }

    if (!profileId) {
      throw new Error('Profile ID is required');
    }
    
    console.log('Finding best image for prompt:', prompt, 'Profile ID:', profileId);

    let selectedImage = null;
    let imageSource = null;
    let imageUrl = null;

    // Try Pixabay first
    try {
      console.log('Querying Pixabay API for:', prompt);
      const searchTerms = prompt.split(" ").slice(0, 3).join("+"); // Use first 3 words for search
      const pixabayUrl = `https://pixabay.com/api/?key=${PIXABAY_API_KEY}&q=${encodeURIComponent(searchTerms)}&image_type=photo&per_page=3`;
      
      const pixabayResponse = await fetch(pixabayUrl);
      const pixabayData = await pixabayResponse.json();
      
      if (pixabayData.hits && pixabayData.hits.length > 0) {
        // Select the first image from Pixabay
        const image = pixabayData.hits[0];
        imageUrl = image.largeImageURL;
        imageSource = 'pixabay';
        console.log('Found suitable image on Pixabay');
      } else {
        console.log('No suitable images found on Pixabay, falling back to Hugging Face');
      }
    } catch (error) {
      console.error('Error querying Pixabay:', error);
      console.log('Falling back to Hugging Face due to Pixabay error');
    }

    // If no suitable image found on Pixabay, use Hugging Face
    if (!imageUrl) {
      console.log('Generating image with Hugging Face for prompt:', prompt);
      const hf = new HfInference(HUGGING_FACE_ACCESS_TOKEN);

      // Using a faster and more reliable model
      const image = await hf.textToImage({
        inputs: prompt,
        model: 'runwayml/stable-diffusion-v1-5',
        parameters: {
          negative_prompt: "blurry, bad quality, distorted",
          num_inference_steps: 20,
          guidance_scale: 7,
        }
      });

      if (!image) {
        throw new Error('No image was generated by Hugging Face');
      }

      console.log('Image generated successfully by Hugging Face, converting to base64');

      // Convert the blob to base64 string
      const arrayBuffer = await image.arrayBuffer();
      const base64 = btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)));
      imageUrl = `data:image/png;base64,${base64}`;
      imageSource = 'huggingface';
    }

    console.log(`Successfully retrieved image from ${imageSource}`);

    return new Response(
      JSON.stringify({ imageUrl, source: imageSource }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  } catch (error) {
    console.error('Error in multi-source-image function:', error);
    
    let statusCode = 500;
    let errorMessage = error.message || 'Failed to generate image';
    
    // More specific error handling
    if (error.message?.includes('rate limit')) {
      statusCode = 429;
      errorMessage = 'API rate limit exceeded. Please try again later.';
    } else if (error.message?.includes('invalid token')) {
      statusCode = 401;
      errorMessage = 'Invalid API token. Please check your API keys.';
    } else if (error.message?.includes('model not found')) {
      statusCode = 404;
      errorMessage = 'The AI model could not be loaded. Please try again.';
    }
    
    return new Response(
      JSON.stringify({ error: errorMessage }),
      { 
        status: statusCode,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});
